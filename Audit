// Funciones adicionales para el sistema de correos
        function updateEmailConfig() {
            try {
                const service = document.getElementById('emailService').value;
                const statusDiv = document.getElementById('serviceStatus');
                
                appState.emailConfig.service = service;
                
                switch (service) {
                    case 'emailjs':
                        statusDiv.innerHTML = '<strong>üü¢ EmailJS</strong><span>Servicio Cloud Activo</span>';
                        statusDiv.className = 'stat';
                        statusDiv.style.background = 'rgba(40, 167, 69, 0.1)';
                        break;
                    case 'mailto':
                        statusDiv.innerHTML = '<strong>üü° Cliente Local</strong><span>Gmail/Outlook del Sistema</span>';
                        statusDiv.className = 'stat';
                        statusDiv.style.background = 'rgba(255, 193, 7, 0.1)';
                        break;
                    case 'backend':
                        statusDiv.innerHTML = '<strong>üîµ API Backend</strong><span>Servidor Personalizado</span>';
                        statusDiv.className = 'stat';
                        statusDiv.style.background = 'rgba(23, 162, 184, 0.1)';
                        break;
                }
                
                showAlert('info', `Configuraci√≥n cambiada a: ${service}`);
            } catch (error) {
                console.error('Error actualizando configuraci√≥n:', error);
            }
        }

        function testEmailService() {
            try {
                const service = appState.emailConfig.service;
                
                switch (service) {
                    case 'emailjs':
                        testEmailJS();
                        break;
                    case 'mailto':
                        testMailto();
                        break;
                    case 'backend':
                        testBackendAPI();
                        break;
                }
            } catch (error) {
                console.error('Error probando servicio:', error);
                showAlert('error', 'Error al probar el servicio de correo');
            }
        }

        // Funciones para configurar EmailJS
        function saveEmailJSConfig() {
            try {
                const publicKey = document.getElementById('configPublicKey').value.trim();
                const serviceId = document.getElementById('configServiceId').value.trim();
                const templateId = document.getElementById('configTemplateId').value.trim();

                // Validaci√≥n m√°s estricta
                if (!publicKey || publicKey.length < 10) {
                    showAlert('error', '‚ö†Ô∏è Ingrese un Public Key v√°lido (ej: user_abc123xyz)');
                    return;
                }

                if (!serviceId || !serviceId.startsWith('service_')) {
                    showAlert('error', '‚ö†Ô∏è Service ID debe empezar con "service_" (ej: service_gmail123)');
                    return;
                }

                if (!templateId || !templateId.startsWith('template_')) {
                    showAlert('error', '‚ö†Ô∏è Template ID debe empezar con "template_" (ej: template_audit01)');
                    return;
                }

                // Guardar configuraci√≥n
                appState.emailConfig.emailjsPublicKey = publicKey;
                appState.emailConfig.emailjsServiceId = serviceId;
                appState.emailConfig.emailjsTemplateId = templateId;

                // Inicializar EmailJS con la nueva clave
                if (emailjsLoaded) {
                    try {
                        emailjs.init(publicKey);
                        showAlert('success', '‚úÖ EmailJS conectado exitosamente! Ya puedes enviar correos directamente.');
                    } catch (initError) {
                        showAlert('warning', '‚ö†Ô∏è Credenciales guardadas, pero hubo un problema al inicializar. Verifique el Public Key.');
                    }
                } else {
                    showAlert('warning', '‚ö†Ô∏è Credenciales guardadas, pero EmailJS no est√° disponible. Verifique conexi√≥n a internet.');
                }

                updateEmailJSStatus();
                
                // Cambiar autom√°ticamente a EmailJS como m√©todo principal
                document.getElementById('emailService').value = 'emailjs';
                updateEmailConfig();
                
            } catch (error) {
                console.error('Error guardando configuraci√≥n:', error);
                showAlert('error', '‚ùå Error al guardar la configuraci√≥n: ' + error.message);
            }
        }

        function updateEmailJSStatus() {
            try {
                const statusDiv = document.getElementById('emailjsStatus');
                if (!statusDiv) return;

                const { emailjsPublicKey, emailjsServiceId, emailjsTemplateId, emailsSentToday, maxEmailsPerDay } = appState.emailConfig;
                
                let statusHTML = '';
                
                if (emailjsPublicKey && emailjsPublicKey.length > 10 && emailjsLoaded) {
                    // EmailJS configurado y funcionando
                    const emailsRemaining = maxEmailsPerDay - emailsSentToday;
                    const percentUsed = (emailsSentToday / maxEmailsPerDay * 100).toFixed(1);
                    
                    statusHTML = `
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                            <div style="background: rgba(40, 167, 69, 0.1); padding: 15px; border-radius: 8px; border-left: 4px solid #28a745;">
                                <p><strong>üü¢ EmailJS CONECTADO</strong></p>
                                <p style="font-size: 12px; color: #495057; margin: 5px 0;">Listo para env√≠o directo</p>
                            </div>
                            <div style="background: rgba(23, 162, 184, 0.1); padding: 15px; border-radius: 8px;">
                                <p><strong>üìä Uso Diario</strong></p>
                                <p>${emailsSentToday}/${maxEmailsPerDay} emails (${percentUsed}%)</p>
                                <p style="font-size: 12px; color: #495057;">Quedan: ${emailsRemaining}</p>
                            </div>
                        </div>
                        <div style="margin-top: 15px; padding: 10px; background: rgba(248, 249, 250, 0.8); border-radius: 6px;">
                            <p><strong>üîß Configuraci√≥n Activa:</strong></p>
                            <p style="font-size: 12px; font-family: monospace; margin: 5px 0;">
                                Public Key: ${publicKey.substring(0, 8)}***<br>
                                Service: ${emailjsServiceId}<br>
                                Template: ${emailjsTemplateId}
                            </p>
                        </div>
                    `;
                } else if (!emailjsLoaded) {
                    statusHTML = `
                        <div style="background: rgba(220, 53, 69, 0.1); padding: 15px; border-radius: 8px; border-left: 4px solid #dc3545;">
                            <p><strong>üî¥ EmailJS no disponible</strong></p>
                            <p style="font-size: 12px; color: #495057; margin: 5px 0;">Problema de conexi√≥n a internet</p>
                            <p style="font-size: 12px; color: #495057;">üîÑ Usando cliente local como respaldo</p>
                        </div>
                    `;
                } else {
                    statusHTML = `
                        <div style="background: rgba(255, 193, 7, 0.1); padding: 15px; border-radius: 8px; border-left: 4px solid #ffc107;">
                            <p><strong>üü° EmailJS disponible - Sin configurar</strong></p>
                            <p style="font-size: 12px; color: #495057; margin: 5px 0;">Complete los campos arriba para activar env√≠o directo</p>
                            <p style="font-size: 12px; color: #495057;">üîÑ Usando cliente local mientras tanto</p>
                        </div>
                    `;
                }

                statusDiv.innerHTML = statusHTML;
                
            } catch (error) {
                console.error('Error actualizando estado:', error);
            }
        }

        function showEmailJSStatus() {
            const { emailjsPublicKey, emailjsServiceId, emailjsTemplateId, emailsSentToday, maxEmailsPerDay } = appState.emailConfig;
            const emailsRemaining = maxEmailsPerDay - emailsSentToday;
            const percentUsed = (emailsSentToday / maxEmailsPerDay * 100).toFixed(1);
            
            const status = `üìä ESTADO DE EMAILJS - Sistema de Auditor√≠a Guatemala

üü¢ ESTADO: Completamente operativo
üìß PUBLIC KEY: ${emailjsPublicKey}
üîß SERVICE ID: ${emailjsServiceId}  
üìù TEMPLATE ID: ${emailjsTemplateId}

üìà USO DIARIO:
‚Ä¢ Emails enviados hoy: ${emailsSentToday}
‚Ä¢ L√≠mite diario: ${maxEmailsPerDay}
‚Ä¢ Emails restantes: ${emailsRemaining}
‚Ä¢ Porcentaje usado: ${percentUsed}%

‚úÖ FUNCIONALIDADES ACTIVAS:
‚Ä¢ Env√≠o directo de correos
‚Ä¢ Formato HTML profesional
‚Ä¢ Plantillas guatemaltecas
‚Ä¢ Tracking completo
‚Ä¢ Compatible con todos los dominios

üéØ LISTO PARA USAR:
Tu sistema est√° 100% configurado y operativo.
Puedes enviar correos directamente desde la aplicaci√≥n.`;

            alert(status);
            showAlert('info', 'üìä Estado del sistema mostrado - Todo operativo');
        }
            try {
                const { emailjsPublicKey, emailjsServiceId, emailjsTemplateId } = appState.emailConfig;

                if (!emailjsLoaded) {
                    showAlert('error', '‚ùå EmailJS no est√° cargado. Verifique conexi√≥n a internet.');
                    return;
                }

                if (!emailjsPublicKey || emailjsPublicKey.length < 10) {
                    showAlert('warning', '‚ö†Ô∏è Debe configurar las credenciales primero');
                    return;
                }

                // Preguntar email de destino para la prueba
                const testEmail = prompt('üìß ¬øA qu√© email enviar la prueba?', 
                    appState.currentUser?.email || 'tu-email@gmail.com');
                
                if (!testEmail) {
                    showAlert('info', 'Prueba cancelada');
                    return;
                }

                showAlert('info', 'üîÑ Enviando correo de prueba via EmailJS...');

                // Preparar datos de prueba
                const testData = {
                    from_name: 'Sistema de Auditor√≠a Guatemala - PRUEBA',
                    from_email: appState.currentUser?.email || 'sistema@auditoria.gt',
                    to_email: testEmail,
                    cc_email: '',
                    subject: 'üß™ Prueba de Configuraci√≥n EmailJS - ¬°FUNCIONA!',
                    message: `¬°Felicidades! Tu configuraci√≥n de EmailJS est√° funcionando perfectamente.

Este correo de prueba confirma que:
‚úÖ Las credenciales est√°n correctas
‚úÖ El servicio de email est√° conectado  
‚úÖ La plantilla funciona correctamente
‚úÖ Ya puedes enviar correos directamente desde la aplicaci√≥n

Tu sistema est√° 100% operativo para enviar correos profesionales.

¬°Ya puedes usar todas las funcionalidades de correo!`,
                    html_content: `
                        <div style="padding: 25px; background: #f8f9fa; border-radius: 10px; border: 2px solid #28a745;">
                            <h2 style="color: #28a745; text-align: center;">üéâ ¬°CONFIGURACI√ìN EXITOSA!</h2>
                            
                            <div style="background: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
                                <h3 style="color: #2c3e50;">‚úÖ Tu EmailJS est√° funcionando perfectamente</h3>
                                <p>Este correo de prueba confirma que:</p>
                                <ul style="color: #495057; line-height: 1.6;">
                                    <li><strong>‚úÖ Credenciales correctas:</strong> Public Key, Service ID y Template ID v√°lidos</li>
                                    <li><strong>‚úÖ Servicio conectado:</strong> Tu cuenta de correo autorizada</li>  
                                    <li><strong>‚úÖ Plantilla operativa:</strong> Formato HTML funcionando</li>
                                    <li><strong>‚úÖ Sistema listo:</strong> Ya puedes enviar correos directamente</li>
                                </ul>
                            </div>
                            
                            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; text-align: center;">
                                <h3>üá¨üáπ Sistema de Auditor√≠a Guatemala</h3>
                                <p>Correos profesionales listos para usar</p>
                            </div>
                            
                            <p style="text-align: center; margin-top: 20px; color: #6c757d;">
                                <strong>¬°Tu sistema est√° 100% operativo!</strong>
                            </p>
                        </div>
                    `,
                    priority: 'high',
                    reply_to: appState.currentUser?.email || 'sistema@auditoria.gt'
                };

                // Enviar correo de prueba
                const response = await emailjs.send(
                    emailjsServiceId, 
                    emailjsTemplateId, 
                    testData, 
                    emailjsPublicKey
                );
                
                if (response.status === 200) {
                    appState.emailConfig.emailsSentToday++;
                    updateEmailJSStatus();
                    
                    showAlert('success', `üéâ ¬°PRUEBA EXITOSA! 
                    
‚úÖ Correo enviado a: ${testEmail}
‚úÖ EmailJS est√° 100% operativo
‚úÖ Ya puedes enviar correos reales

Revisa tu bandeja de entrada en 1-2 minutos.`);
                } else {
                    throw new Error(`HTTP ${response.status}: ${response.text}`);
                }

            } catch (error) {
                console.error('Error en prueba:', error);
                
                let errorMessage = '‚ùå Error en la prueba: ';
                if (error.message.includes('402')) {
                    errorMessage += 'L√≠mite de correos excedido (plan gratuito: 200/mes). Espere hasta ma√±ana o actualice su plan.';
                } else if (error.message.includes('400')) {
                    errorMessage += 'Error de configuraci√≥n. Verifique Service ID y Template ID en EmailJS.';
                } else if (error.message.includes('401')) {
                    errorMessage += 'Error de autorizaci√≥n. Verifique Public Key en EmailJS.';
                } else if (error.message.includes('404')) {
                    errorMessage += 'Template o Service no encontrado. Verifique los IDs en EmailJS.';
                } else {
                    errorMessage += error.message;
                }
                
                showAlert('error', errorMessage);
            }
        }

        function testMailto() {
            try {
                const testMailto = 'mailto:test@example.com?subject=Prueba&body=Test';
                window.open(testMailto, '_blank');
                showAlert('success', '‚úÖ Cliente de correo local disponible');
            } catch (error) {
                showAlert('error', '‚ùå No se pudo abrir cliente de correo local');
            }
        }

        async function testBackendAPI() {
            try {
                // Simulaci√≥n de prueba de API
                const response = await fetch('/api/test-email', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${getAuthToken()}`
                    }
                });

                if (response.ok) {
                    showAlert('success', '‚úÖ API Backend disponible');
                } else {
                    throw new Error('API no disponible');
                }
            } catch (error) {
                showAlert('error', '‚ùå API Backend no disponible: ' + error.message);
            }
        }

        function toggleHTMLPreview() {
            try {
                const htmlCheckbox = document.getElementById('emailHTML');
                const preview = document.getElementById('htmlPreview');
                const message = document.getElementById('emailMessage').value;
                const subject = document.getElementById('emailSubject').value;

                if (htmlCheckbox.checked) {
                    preview.classList.remove('hidden');
                    updateHTMLPreview();
                } else {
                    preview.classList.add('hidden');
                }
            } catch (error) {
                console.error('Error en vista previa HTML:', error);
            }
        }

        function updateHTMLPreview() {
            try {
                const message = document.getElementById('emailMessage').value;
                const subject = document.getElementById('emailSubject').value;
                const previewContent = document.getElementById('previewContent');

                if (previewContent) {
                    previewContent.innerHTML = formatEmailHTML(message);
                }
            } catch (error) {
                console.error('Error actualizando vista previa:', error);
            }
        }

        function saveDraft() {
            try {
                const draft = {
                    id: Date.now(),
                    to: document.getElementById('emailTo').value,
                    cc: document.getElementById('emailCC').value,
                    subject: document.getElementById('emailSubject').value,
                    message: document.getElementById('emailMessage').value,
                    priority: document.getElementById('emailPriority').value,
                    htmlFormat: document.getElementById('emailHTML').checked,
                    savedDate: new Date().toLocaleString('es-GT'),
                    from: appState.currentUser ? appState.currentUser.email : 'usuario@sistema.gt'
                };

                appState.drafts.push(draft);
                updateDraftsDisplay();
                showAlert('success', 'üìù Borrador guardado exitosamente');
                
            } catch (error) {
                console.error('Error guardando borrador:', error);
                showAlert('error', 'Error al guardar borrador');
            }
        }

        function scheduleEmail() {
            try {
                const scheduleTime = prompt('¬øCu√°ndo desea programar el env√≠o?\n\nIngrese fecha y hora (ej: 2025-09-15 14:30)');
                
                if (scheduleTime) {
                    const scheduledEmail = {
                        id: Date.now(),
                        to: document.getElementById('emailTo').value,
                        subject: document.getElementById('emailSubject').value,
                        message: document.getElementById('emailMessage').value,
                        scheduledFor: scheduleTime,
                        status: 'scheduled',
                        createdDate: new Date().toLocaleString('es-GT')
                    };

                    appState.emails.push(scheduledEmail);
                    updateEmailHistoryDisplay();
                    showAlert('success', `‚è∞ Correo programado para: ${scheduleTime}`);
                    document.getElementById('emailForm').reset();
                }
            } catch (error) {
                console.error('Error programando correo:', error);
                showAlert('error', 'Error al programar correo');
            }
        }

        function updateDraftsDisplay() {
            try {
                const draftsDiv = document.getElementById('emailDrafts');
                if (!draftsDiv) return;

                let html = '';

                appState.drafts.forEach(draft => {
                    html += `
                        <div class="email-history-item">
                            <div style="display: flex; justify-content: space-between; align-items: start;">
                                <div>
                                    <h4>üìù ${draft.subject || 'Sin asunto'}</h4>
                                    <p><strong>Para:</strong> ${draft.to}</p>
                                    <p><strong>Guardado:</strong> ${draft.savedDate}</p>
                                    <span class="email-status draft">Borrador</span>
                                </div>
                                <div>
                                    <button class="btn btn-success" onclick="loadDraft(${draft.id})">Continuar</button>
                                    <button class="btn btn-danger" onclick="deleteDraft(${draft.id})">Eliminar</button>
                                </div>
                            </div>
                        </div>
                    `;
                });

                draftsDiv.innerHTML = html || '<p>No hay borradores guardados</p>';
            } catch (error) {
                console.error('Error actualizando borradores:', error);
            }
        }

        function updateEmailHistoryDisplay() {
            try {
                const historyDiv = document.getElementById('emailHistory');
                if (!historyDiv) return;

                let html = '';

                appState.emails.forEach(email => {
                    const statusClass = email.status || 'sent';
                    const statusText = email.status === 'scheduled' ? 'Programado' : 
                                     email.status === 'failed' ? 'Fallido' : 'Enviado';
                    
                    html += `
                        <div class="email-history-item">
                            <div>
                                <h4>üìß ${email.subject}</h4>
                                <p><strong>Para:</strong> ${email.to}</p>
                                <p><strong>De:<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Auditor√≠a - Guatemala</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .header h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 10px;
            font-size: 2.5em;
        }

        .header p {
            text-align: center;
            color: #7f8c8d;
            font-size: 1.1em;
        }

        .nav-tabs {
            display: flex;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 12px;
            padding: 5px;
            margin-bottom: 20px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            flex-wrap: wrap;
            gap: 5px;
        }

        .tab-button {
            flex: 1;
            min-width: 120px;
            background: transparent;
            border: none;
            padding: 15px 20px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            font-size: 14px;
        }

        .tab-button:hover {
            background: rgba(103, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .tab-button.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            box-shadow: 0 4px 15px rgba(103, 126, 234, 0.3);
        }

        .tab-content {
            display: none;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.5s ease;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.9);
        }

        .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(103, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(103, 126, 234, 0.3);
        }

        .btn-success {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        }

        .btn-danger {
            background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
        }

        .btn-warning {
            background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
            color: #212529;
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .card {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
        }

        .card h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.3em;
        }

        .inventory-item {
            background: rgba(248, 249, 250, 0.8);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            border-left: 4px solid #667eea;
        }

        .inventory-item h4 {
            color: #495057;
            margin-bottom: 10px;
        }

        .inventory-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
        }

        .stat {
            text-align: center;
            padding: 10px;
            background: rgba(103, 126, 234, 0.1);
            border-radius: 6px;
        }

        .stat strong {
            display: block;
            font-size: 1.2em;
            color: #667eea;
        }

        .file-upload {
            border: 2px dashed #667eea;
            border-radius: 12px;
            padding: 40px 20px;
            text-align: center;
            transition: all 0.3s ease;
            background: rgba(103, 126, 234, 0.05);
            cursor: pointer;
        }

        .file-upload:hover {
            border-color: #764ba2;
            background: rgba(103, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .file-upload.dragover {
            border-color: #28a745;
            background: rgba(40, 167, 69, 0.1);
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e9ecef;
            border-radius: 4px;
            margin: 10px 0;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            width: 0%;
            transition: width 0.3s ease;
        }

        .user-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .user-item {
            background: rgba(248, 249, 250, 0.8);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-left: 4px solid #28a745;
        }

        .user-info {
            flex: 1;
        }

        .user-actions {
            display: flex;
            gap: 5px;
        }

        .step {
            background: rgba(255, 255, 255, 0.8);
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            margin: 15px 0;
            border-left: 4px solid #667eea;
        }

        .step strong {
            color: #2c3e50;
            font-size: 1.1em;
            display: block;
            margin-bottom: 10px;
        }

        .step p {
            margin: 8px 0;
            color: #495057;
        }

        .template-code {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            padding: 15px;
            margin: 10px 0;
            font-family: 'Courier New', monospace;
        }

        .template-code h6 {
            color: #495057;
            margin: 10px 0 5px 0;
            font-weight: bold;
        }

        .template-code code {
            background: #e9ecef;
            padding: 2px 6px;
            border-radius: 3px;
            color: #d63384;
        }

        .template-code pre {
            background: #2d3748;
            color: #e2e8f0;
            padding: 15px;
            border-radius: 6px;
            overflow-x: auto;
            font-size: 12px;
            line-height: 1.4;
            margin: 10px 0;
        }

        .config-form {
            background: rgba(103, 126, 234, 0.1);
            border-radius: 8px;
            padding: 20px;
            margin-top: 15px;
        }

        .config-form .form-group {
            margin-bottom: 15px;
        }

        .config-form label {
            font-weight: bold;
            color: #2c3e50;
            display: block;
            margin-bottom: 5px;
        }

        .config-form input {
            width: 100%;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 6px;
            font-family: 'Courier New', monospace;
            background: white;
            font-size: 14px;
        }

        .config-form input:focus {
            border-color: #667eea;
            outline: none;
            box-shadow: 0 0 0 3px rgba(103, 126, 234, 0.1);
        }

        .config-form small {
            display: block;
            color: #6c757d;
            font-size: 12px;
            margin-top: 5px;
            font-family: Arial, sans-serif;
        }

        .config-form h6 {
            color: #856404;
            margin: 0 0 10px 0;
            font-weight: bold;
        }

        .config-form ul {
            margin: 0;
            color: #495057;
            font-size: 13px;
        }

        .config-form li {
            margin: 5px 0;
        }

        .current-status {
            background: rgba(248, 249, 250, 0.8);
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
        }

        .current-status h5 {
            color: #495057;
            margin-bottom: 10px;
        }

        .setup-steps {
            max-height: 600px;
            overflow-y: auto;
            padding-right: 10px;
        }

        .email-history-item {
            background: rgba(248, 249, 250, 0.8);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            border-left: 4px solid #17a2b8;
        }

        .email-status {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: bold;
            text-transform: uppercase;
        }

        .email-status.sent {
            background: #d4edda;
            color: #155724;
        }

        .email-status.draft {
            background: #fff3cd;
            color: #856404;
        }

        .email-status.scheduled {
            background: #d1ecf1;
            color: #0c5460;
        }

        .email-status.failed {
            background: #f8d7da;
            color: #721c24;
        }

        .alert {
            padding: 12px 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid;
        }

        .alert-success {
            background: rgba(40, 167, 69, 0.1);
            border-color: #28a745;
            color: #155724;
        }

        .alert-error {
            background: rgba(220, 53, 69, 0.1);
            border-color: #dc3545;
            color: #721c24;
        }

        .alert-info {
            background: rgba(23, 162, 184, 0.1);
            border-color: #17a2b8;
            color: #0c5460;
        }

        .login-form {
            max-width: 400px;
            margin: 100px auto;
            background: rgba(255, 255, 255, 0.95);
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .logo {
            text-align: center;
            margin-bottom: 30px;
        }

        .logo h2 {
            color: #667eea;
            font-size: 2em;
            margin-bottom: 10px;
        }

        @media (max-width: 768px) {
            .nav-tabs {
                flex-direction: column;
            }
            
            .tab-button {
                min-width: auto;
            }
            
            .grid {
                grid-template-columns: 1fr;
            }
            
            .container {
                padding: 10px;
            }
        }

        .hidden {
            display: none !important;
        }
    </style>
</head>
<body>
    <div id="loginScreen" class="login-form">
        <div class="logo">
            <h2>üá¨üáπ AuditPro</h2>
            <p>Sistema de Auditor√≠a - Guatemala</p>
        </div>
        <form id="loginForm">
            <div class="form-group">
                <label>Correo Electr√≥nico</label>
                <input type="email" id="loginEmail" required>
            </div>
            <div class="form-group">
                <label>Contrase√±a</label>
                <input type="password" id="loginPassword" required>
            </div>
            <div class="form-group">
                <label>Tipo de Usuario</label>
                <select id="userType" required>
                    <option value="">Seleccionar...</option>
                    <option value="admin">Administrador</option>
                    <option value="auditor">Auditor</option>
                    <option value="client">Cliente</option>
                    <option value="developer">Desarrollador</option>
                </select>
            </div>
            <button type="submit" class="btn" style="width: 100%;">Iniciar Sesi√≥n</button>
        </form>
    </div>

    <div id="mainApp" class="hidden">
        <div class="container">
            <div class="header">
                <h1>üá¨üáπ Sistema de Auditor√≠a</h1>
                <p>Plataforma Integral de Auditor√≠a para Empresas Guatemaltecas</p>
                <div style="text-align: right; margin-top: 15px;">
                    <span id="currentUser" style="margin-right: 20px; font-weight: bold;"></span>
                    <button class="btn btn-danger" onclick="logout()">Cerrar Sesi√≥n</button>
                </div>
            </div>

            <div class="nav-tabs" id="navTabs">
                <button class="tab-button active" onclick="switchTab('inventarios')">üì¶ Inventarios</button>
                <button class="tab-button" onclick="switchTab('usuarios')">üë• Usuarios</button>
                <button class="tab-button" onclick="switchTab('archivos')">üìÅ Archivos</button>
                <button class="tab-button" onclick="switchTab('correos')">üìß Correos</button>
                <button class="tab-button" onclick="switchTab('reportes')">üìä Reportes</button>
                <button class="tab-button" onclick="switchTab('perfil')">üë§ Perfil</button>
            </div>

            <!-- Inventarios Tab -->
            <div id="inventarios" class="tab-content active">
                <h2>üì¶ Gesti√≥n de Inventarios</h2>
                
                <div class="grid">
                    <div class="card">
                        <h3>Agregar Producto al Inventario</h3>
                        <form id="inventoryForm">
                            <div class="form-group">
                                <label>C√≥digo del Producto</label>
                                <input type="text" id="productCode" required>
                            </div>
                            <div class="form-group">
                                <label>Nombre del Producto</label>
                                <input type="text" id="productName" required>
                            </div>
                            <div class="form-group">
                                <label>Cantidad</label>
                                <input type="number" id="productQuantity" required>
                            </div>
                            <div class="form-group">
                                <label>Costo Unitario (Q.)</label>
                                <input type="number" step="0.01" id="unitCost" required>
                            </div>
                            <div class="form-group">
                                <label>Precio de Venta (Q.)</label>
                                <input type="number" step="0.01" id="salePrice" required>
                            </div>
                            <div class="form-group">
                                <label>Valor de Mercado (Q.)</label>
                                <input type="number" step="0.01" id="marketValue" required>
                            </div>
                            <button type="submit" class="btn">Agregar Producto</button>
                        </form>
                    </div>

                    <div class="card">
                        <h3>Resumen de Inventario</h3>
                        <div class="inventory-stats">
                            <div class="stat">
                                <strong id="totalProducts">0</strong>
                                <span>Productos</span>
                            </div>
                            <div class="stat">
                                <strong id="totalValue">Q. 0.00</strong>
                                <span>Valor Total</span>
                            </div>
                            <div class="stat">
                                <strong id="totalVNR">Q. 0.00</strong>
                                <span>VNR Total</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h3>Lista de Productos</h3>
                    <div id="inventoryList"></div>
                </div>
            </div>

            <!-- Usuarios Tab -->
            <div id="usuarios" class="tab-content">
                <h2>üë• Gesti√≥n de Usuarios</h2>
                
                <div class="grid">
                    <div class="card">
                        <h3>Crear Nuevo Usuario</h3>
                        <form id="userForm">
                            <div class="form-group">
                                <label>Nombre Completo</label>
                                <input type="text" id="userName" required>
                            </div>
                            <div class="form-group">
                                <label>Correo Electr√≥nico</label>
                                <input type="email" id="userEmail" required>
                            </div>
                            <div class="form-group">
                                <label>N√∫mero de Tel√©fono</label>
                                <input type="tel" id="userPhone" required>
                            </div>
                            <div class="form-group">
                                <label>Empresa</label>
                                <input type="text" id="userCompany" required>
                            </div>
                            <div class="form-group">
                                <label>Puesto</label>
                                <input type="text" id="userPosition" required>
                            </div>
                            <div class="form-group">
                                <label>Tipo de Usuario</label>
                                <select id="userRole" required>
                                    <option value="">Seleccionar...</option>
                                    <option value="admin">Administrador</option>
                                    <option value="auditor">Auditor</option>
                                    <option value="client">Cliente</option>
                                </select>
                            </div>
                            <button type="submit" class="btn">Crear Usuario</button>
                        </form>
                    </div>

                    <div class="card">
                        <h3>Usuarios Registrados</h3>
                        <div class="user-list" id="usersList"></div>
                    </div>
                </div>
            </div>

            <!-- Archivos Tab -->
            <div id="archivos" class="tab-content">
                <h2>üìÅ Gesti√≥n de Archivos</h2>
                
                <div class="card">
                    <h3>Subir Archivos</h3>
                    <div class="file-upload" id="fileUploadZone">
                        <div>
                            <h4>üìÅ Arrastra archivos aqu√≠ o haz clic para seleccionar</h4>
                            <p>Formatos soportados: .xlsx, .pdf, .png, .docx (m√°x. 200MB)</p>
                        </div>
                        <input type="file" id="fileInput" multiple accept=".xlsx,.pdf,.png,.docx" style="display: none;">
                    </div>
                    <div id="uploadProgress" class="hidden">
                        <div class="progress-bar">
                            <div class="progress-fill" id="progressFill"></div>
                        </div>
                        <p id="uploadStatus"></p>
                    </div>
                </div>

                <div class="card">
                    <h3>Archivos Subidos</h3>
                    <div id="filesList"></div>
                </div>
            </div>

            <!-- Correos Tab -->
            <div id="correos" class="tab-content">
                <h2>üìß Centro de Correos</h2>
                
                <!-- Configuraci√≥n de Servicios de Correo -->
                <div class="card">
                    <h3>‚öôÔ∏è Configuraci√≥n de Correo</h3>
                    <div class="grid">
                        <div class="form-group">
                            <label>Servicio de Correo</label>
                            <select id="emailService" onchange="updateEmailConfig()">
                                <option value="emailjs">EmailJS (Recomendado)</option>
                                <option value="mailto">Cliente Local (Gmail, Outlook)</option>
                                <option value="backend">API Personalizada</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Estado del Servicio</label>
                            <div id="serviceStatus" class="stat" style="background: rgba(40, 167, 69, 0.1);">
                                <strong>üü¢ Activo</strong>
                                <span>EmailJS Configurado</span>
                            </div>
                        </div>
                    </div>
                    <div id="emailjsConfig" class="email-config">
                        <h4>üìß Configuraci√≥n EmailJS - Gu√≠a Paso a Paso</h4>
                        
                        <div class="setup-steps">
                            <h5>üöÄ Pasos para Configurar EmailJS:</h5>
                            
                            <div class="step">
                                <strong>1. Crear Cuenta EmailJS</strong>
                                <p>‚Ä¢ Ir a <a href="https://www.emailjs.com" target="_blank">EmailJS.com</a></p>
                                <p>‚Ä¢ Registrarse con Gmail/GitHub</p>
                                <p>‚Ä¢ Confirmar email de verificaci√≥n</p>
                                <button class="btn btn-info" onclick="window.open('https://www.emailjs.com', '_blank')">üîó Abrir EmailJS</button>
                            </div>

                            <div class="step">
                                <strong>2. Configurar Servicio de Email</strong>
                                <p>‚Ä¢ En Dashboard ‚Üí "Email Services" ‚Üí "Add Service"</p>
                                <p>‚Ä¢ Seleccionar Gmail, Outlook, Yahoo, etc.</p>
                                <p>‚Ä¢ Autorizar acceso a tu cuenta de correo</p>
                                <p>‚Ä¢ <strong>Copiar Service ID</strong> (ej: service_abc123)</p>
                            </div>

                            <div class="step">
                                <strong>3. Crear Plantilla de Email</strong>
                                <p>‚Ä¢ Ir a "Email Templates" ‚Üí "Create New Template"</p>
                                <p>‚Ä¢ Usar esta plantilla:</p>
                                <div class="template-code">
                                    <h6>Asunto:</h6>
                                    <code>{{subject}}</code>
                                    
                                    <h6>Contenido HTML:</h6>
                                    <pre><code>&lt;div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;"&gt;
    &lt;div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center;"&gt;
        &lt;h2&gt;üá¨üáπ {{from_name}}&lt;/h2&gt;
        &lt;p&gt;Sistema de Auditor√≠a - Guatemala&lt;/p&gt;
    &lt;/div&gt;
    
    &lt;div style="padding: 30px; background: white; border: 1px solid #e9ecef;"&gt;
        &lt;p&gt;Para: {{to_email}}&lt;/p&gt;
        {{#cc_email}}&lt;p&gt;CC: {{cc_email}}&lt;/p&gt;{{/cc_email}}
        &lt;br&gt;
        &lt;div&gt;{{{html_content}}}&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div style="background: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #6c757d;"&gt;
        &lt;p&gt;Enviado desde Sistema de Auditor√≠a Guatemala&lt;/p&gt;
        &lt;p&gt;Email: {{from_email}} | Prioridad: {{priority}}&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;</code></pre>
                                </div>
                                <p>‚Ä¢ <strong>Copiar Template ID</strong> (ej: template_xyz789)</p>
                            </div>

                            <div class="step">
                                <strong>4. Obtener Claves API</strong>
                                <p>‚Ä¢ Ir a "Account" ‚Üí "General"</p>
                                <p>‚Ä¢ <strong>Copiar Public Key</strong> (ej: SU_CLAVE_PUBLICA)</p>
                            </div>

                            <div class="step">
                                <strong>5. Configurar en la Aplicaci√≥n</strong>
                                <div class="config-form">
                                    <div class="form-group">
                                        <label>üîë Public Key:</label>
                                        <input type="text" id="configPublicKey" value="oRv0UzebO2bmLUcBi" readonly>
                                        <small>‚úÖ Configurado correctamente</small>
                                    </div>
                                    <div class="form-group">
                                        <label>üìß Service ID:</label>
                                        <input type="text" id="configServiceId" value="service_b3bbf3j" readonly>
                                        <small>‚úÖ Servicio conectado</small>
                                    </div>
                                    <div class="form-group">
                                        <label>üìù Template ID:</label>
                                        <input type="text" id="configTemplateId" value="template_48fcljb" readonly>
                                        <small>‚úÖ Plantilla lista</small>
                                    </div>
                                    <div style="background: rgba(40, 167, 69, 0.1); padding: 15px; border-radius: 6px; margin: 15px 0; border-left: 4px solid #28a745;">
                                        <h6>üéâ ¬°EmailJS YA EST√Å CONFIGURADO!</h6>
                                        <p style="margin: 10px 0 0 0; color: #155724;">
                                            ‚úÖ Tus credenciales est√°n integradas<br>
                                            ‚úÖ Sistema listo para enviar correos directamente<br>
                                            ‚úÖ Hasta 200 emails gratis por mes
                                        </p>
                                    </div>
                                    <button class="btn btn-success" onclick="testEmailJSReal()">üß™ Enviar Email de Prueba</button>
                                    <button class="btn btn-warning" onclick="showEmailJSStatus()">üìä Ver Estado del Sistema</button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="current-status">
                            <h5>üìä Estado Actual:</h5>
                            <div id="emailjsStatus">
                                <p>üî¥ No configurado - Usando cliente local</p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="email-composer">
                    <h3>Enviar Correo</h3>
                    <form id="emailForm">
                        <div class="grid">
                            <div class="form-group">
                                <label>Para (Destinatario)</label>
                                <input type="email" id="emailTo" placeholder="destinatario@gmail.com" required>
                            </div>
                            <div class="form-group">
                                <label>Copia (CC) - Opcional</label>
                                <input type="email" id="emailCC" placeholder="copia@empresa.gt">
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Asunto</label>
                            <input type="text" id="emailSubject" placeholder="Asunto del correo" required>
                        </div>
                        <div class="form-group">
                            <label>Prioridad</label>
                            <select id="emailPriority">
                                <option value="normal">Normal</option>
                                <option value="high">Alta</option>
                                <option value="low">Baja</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Mensaje</label>
                            <textarea id="emailMessage" rows="10" placeholder="Escriba su mensaje aqu√≠..." required></textarea>
                        </div>
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="emailHTML" onchange="toggleHTMLPreview()">
                                Enviar como HTML con formato profesional
                            </label>
                        </div>
                        <div id="htmlPreview" class="hidden" style="border: 1px solid #ddd; padding: 15px; border-radius: 8px; background: #f8f9fa; margin-top: 10px;">
                            <h4>Vista previa del correo:</h4>
                            <div id="previewContent"></div>
                        </div>
                        <div style="margin-top: 20px;">
                            <button type="submit" class="btn">üìß Enviar Correo</button>
                            <button type="button" class="btn btn-warning" onclick="saveDraft()">üìù Guardar Borrador</button>
                            <button type="button" class="btn btn-info" onclick="scheduleEmail()">‚è∞ Programar Env√≠o</button>
                        </div>
                    </form>
                </div>

                <div class="grid">
                    <div class="card">
                        <h3>üìß Plantillas de Correo</h3>
                        <button class="btn btn-warning" onclick="loadEmailTemplate('audit')">üìã Solicitud de Auditor√≠a</button>
                        <button class="btn btn-warning" onclick="loadEmailTemplate('report')">üìä Reporte de Inventario</button>
                        <button class="btn btn-warning" onclick="loadEmailTemplate('reminder')">‚è∞ Recordatorio</button>
                        <button class="btn btn-warning" onclick="loadEmailTemplate('invoice')">üßæ Facturaci√≥n</button>
                        <button class="btn btn-warning" onclick="loadEmailTemplate('meeting')">üë• Convocatoria Reuni√≥n</button>
                    </div>

                    <div class="card">
                        <h3>üì¨ Historial de Correos</h3>
                        <div id="emailHistory" class="user-list"></div>
                    </div>
                </div>

                <div class="card">
                    <h3>üìã Borradores</h3>
                    <div id="emailDrafts" class="user-list"></div>
                </div>
            </div>

            <!-- Reportes Tab -->
            <div id="reportes" class="tab-content">
                <h2>üìä Reportes y An√°lisis</h2>
                
                <div class="grid">
                    <div class="card">
                        <h3>Generar Reportes</h3>
                        <button class="btn btn-success" onclick="generateReport('inventory')">üìã Reporte de Inventario</button>
                        <button class="btn btn-success" onclick="generateReport('vnr')">üí∞ An√°lisis VNR</button>
                        <button class="btn btn-success" onclick="generateReport('valuation')">üìà Valuaci√≥n de Inventarios</button>
                        <button class="btn btn-success" onclick="generateReport('users')">üë• Reporte de Usuarios</button>
                    </div>

                    <div class="card">
                        <h3>Estad√≠sticas Generales</h3>
                        <div class="inventory-stats">
                            <div class="stat">
                                <strong id="statsProducts">0</strong>
                                <span>Total Productos</span>
                            </div>
                            <div class="stat">
                                <strong id="statsUsers">0</strong>
                                <span>Usuarios Activos</span>
                            </div>
                            <div class="stat">
                                <strong id="statsFiles">0</strong>
                                <span>Archivos</span>
                            </div>
                            <div class="stat">
                                <strong id="statsEmails">0</strong>
                                <span>Correos Enviados</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Perfil Tab -->
            <div id="perfil" class="tab-content">
                <h2>üë§ Perfil de Usuario</h2>
                
                <div class="card">
                    <h3>Informaci√≥n Personal</h3>
                    <form id="profileForm">
                        <div class="grid">
                            <div class="form-group">
                                <label>Nombre Completo</label>
                                <input type="text" id="profileName" required>
                            </div>
                            <div class="form-group">
                                <label>Correo Electr√≥nico</label>
                                <input type="email" id="profileEmail" required>
                            </div>
                        </div>
                        <div class="grid">
                            <div class="form-group">
                                <label>Tel√©fono</label>
                                <input type="tel" id="profilePhone" required>
                            </div>
                            <div class="form-group">
                                <label>Empresa</label>
                                <input type="text" id="profileCompany" required>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Puesto</label>
                            <input type="text" id="profilePosition" required>
                        </div>
                        <button type="submit" class="btn">üíæ Actualizar Perfil</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.emailjs.com/dist/email.min.js"></script>
    <script>
        // Configuraci√≥n segura de EmailJS
        let emailjsLoaded = false;
        
        // Verificar si EmailJS se carg√≥ correctamente
        function checkEmailJSLoad() {
            if (typeof emailjs !== 'undefined') {
                emailjsLoaded = true;
                console.log('‚úÖ EmailJS cargado correctamente');
                // Inicializar inmediatamente con las credenciales reales
                try {
                    emailjs.init("oRv0UzebO2bmLUcBi");
                    console.log('üîß EmailJS inicializado con credenciales del usuario');
                } catch (error) {
                    console.error('Error inicializando EmailJS:', error);
                }
            } else {
                emailjsLoaded = false;
                console.log('‚ö†Ô∏è EmailJS no disponible, usando m√©todos alternativos');
            }
        }

        // Verificar carga despu√©s de un delay
        setTimeout(checkEmailJSLoad, 1000);

        // Estado global de la aplicaci√≥n
        let appState = {
            currentUser: null,
            inventory: [],
            users: [],
            files: [],
            emails: [],
            drafts: [],
            emailConfig: {
                service: 'emailjs',
                // Credenciales reales de EmailJS - YA CONFIGURADAS
                emailjsPublicKey: 'oRv0UzebO2bmLUcBi', // Tu Public Key real
                emailjsServiceId: 'service_b3bbf3j',    // Tu Service ID real
                emailjsTemplateId: 'template_48fcljb',   // Tu Template ID real
                smtpConfig: null,
                // Configuraci√≥n adicional
                maxEmailsPerDay: 200, // L√≠mite gratuito de EmailJS
                emailsSentToday: 0
            }
        };

        // Inicializaci√≥n de la aplicaci√≥n
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        function initializeApp() {
            try {
                // Configurar event listeners
                const loginForm = document.getElementById('loginForm');
                const inventoryForm = document.getElementById('inventoryForm');
                const userForm = document.getElementById('userForm');
                const emailForm = document.getElementById('emailForm');
                const profileForm = document.getElementById('profileForm');

                if (loginForm) loginForm.addEventListener('submit', handleLogin);
                if (inventoryForm) inventoryForm.addEventListener('submit', handleInventorySubmit);
                if (userForm) userForm.addEventListener('submit', handleUserSubmit);
                if (emailForm) emailForm.addEventListener('submit', handleEmailSubmit);
                if (profileForm) profileForm.addEventListener('submit', handleProfileSubmit);
                
                // Configurar subida de archivos
                setupFileUpload();
                
                // Cargar datos iniciales de ejemplo
                loadSampleData();
                
                console.log('Aplicaci√≥n inicializada correctamente');
            } catch (error) {
                console.error('Error al inicializar la aplicaci√≥n:', error);
            }
        }

        function handleLogin(e) {
            e.preventDefault();
            try {
                const email = document.getElementById('loginEmail').value;
                const password = document.getElementById('loginPassword').value;
                const userType = document.getElementById('userType').value;

                if (email && password && userType) {
                    appState.currentUser = {
                        email: email,
                        type: userType,
                        name: getUserNameFromEmail(email)
                    };

                    document.getElementById('loginScreen').classList.add('hidden');
                    document.getElementById('mainApp').classList.remove('hidden');
                    document.getElementById('currentUser').textContent = `${appState.currentUser.name} (${userType})`;
                    
                    setupUserInterface();
                    showAlert('success', '¬°Bienvenido al Sistema de Auditor√≠a!');
                }
            } catch (error) {
                console.error('Error en el login:', error);
                showAlert('error', 'Error al iniciar sesi√≥n');
            }
        }

        function getUserNameFromEmail(email) {
            return email.split('@')[0].replace(/[._]/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        }

        function logout() {
            try {
                appState.currentUser = null;
                document.getElementById('loginScreen').classList.remove('hidden');
                document.getElementById('mainApp').classList.add('hidden');
                document.getElementById('loginForm').reset();
            } catch (error) {
                console.error('Error al cerrar sesi√≥n:', error);
            }
        }

        function setupUserInterface() {
            try {
                const userType = appState.currentUser.type;
                
                if (userType === 'client') {
                    hideTabsExcept(['inventarios', 'archivos', 'perfil']);
                } else if (userType === 'auditor') {
                    hideTabsExcept(['inventarios', 'usuarios', 'archivos', 'correos', 'reportes', 'perfil']);
                }
            } catch (error) {
                console.error('Error configurando interfaz:', error);
            }
        }

        function hideTabsExcept(allowedTabs) {
            try {
                const tabs = document.querySelectorAll('.tab-button');
                tabs.forEach(tab => {
                    const onClickAttr = tab.getAttribute('onclick');
                    if (onClickAttr) {
                        const match = onClickAttr.match(/switchTab\('(.+)'\)/);
                        if (match) {
                            const tabName = match[1];
                            if (!allowedTabs.includes(tabName)) {
                                tab.style.display = 'none';
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error ocultando pesta√±as:', error);
            }
        }

        function switchTab(tabName) {
            try {
                // Ocultar todas las pesta√±as
                document.querySelectorAll('.tab-content').forEach(tab => {
                    tab.classList.remove('active');
                });
                
                // Remover clase active de botones
                document.querySelectorAll('.tab-button').forEach(btn => {
                    btn.classList.remove('active');
                });
                
                // Mostrar pesta√±a seleccionada
                const targetTab = document.getElementById(tabName);
                if (targetTab) {
                    targetTab.classList.add('active');
                }
                
                // Activar bot√≥n correspondiente
                const activeButton = document.querySelector(`[onclick="switchTab('${tabName}')"]`);
                if (activeButton) {
                    activeButton.classList.add('active');
                }
                
                // Actualizar contenido espec√≠fico de la pesta√±a
                if (tabName === 'reportes') {
                    updateStatistics();
                }
            } catch (error) {
                console.error('Error cambiando pesta√±a:', error);
            }
        }

        // GESTI√ìN DE INVENTARIOS
        function handleInventorySubmit(e) {
            e.preventDefault();
            try {
                const product = {
                    id: Date.now(),
                    code: document.getElementById('productCode').value,
                    name: document.getElementById('productName').value,
                    quantity: parseInt(document.getElementById('productQuantity').value),
                    unitCost: parseFloat(document.getElementById('unitCost').value),
                    salePrice: parseFloat(document.getElementById('salePrice').value),
                    marketValue: parseFloat(document.getElementById('marketValue').value),
                    date: new Date().toLocaleDateString()
                };

                // Calcular VNR (Valor Neto de Realizaci√≥n)
                product.vnr = Math.min(product.salePrice, product.marketValue) * product.quantity;
                product.totalCost = product.unitCost * product.quantity;
                product.totalValue = product.salePrice * product.quantity;

                appState.inventory.push(product);
                updateInventoryDisplay();
                document.getElementById('inventoryForm').reset();
                showAlert('success', 'Producto agregado exitosamente al inventario');
            } catch (error) {
                console.error('Error agregando producto:', error);
                showAlert('error', 'Error al agregar el producto');
            }
        }

        function updateInventoryDisplay() {
            try {
                const inventoryList = document.getElementById('inventoryList');
                if (!inventoryList) return;

                let html = '';

                appState.inventory.forEach(product => {
                    html += `
                        <div class="inventory-item">
                            <h4>${product.name} (${product.code})</h4>
                            <div class="inventory-stats">
                                <div class="stat">
                                    <strong>${product.quantity}</strong>
                                    <span>Cantidad</span>
                                </div>
                                <div class="stat">
                                    <strong>Q. ${product.unitCost.toFixed(2)}</strong>
                                    <span>Costo Unitario</span>
                                </div>
                                <div class="stat">
                                    <strong>Q. ${product.totalCost.toFixed(2)}</strong>
                                    <span>Costo Total</span>
                                </div>
                                <div class="stat">
                                    <strong>Q. ${product.vnr.toFixed(2)}</strong>
                                    <span>VNR</span>
                                </div>
                            </div>
                            <div style="margin-top: 10px;">
                                <button class="btn btn-warning" onclick="editProduct(${product.id})">Editar</button>
                                <button class="btn btn-danger" onclick="deleteProduct(${product.id})">Eliminar</button>
                            </div>
                        </div>
                    `;
                });

                inventoryList.innerHTML = html || '<p>No hay productos en el inventario</p>';
                updateInventorySummary();
            } catch (error) {
                console.error('Error actualizando inventario:', error);
            }
        }

        function updateInventorySummary() {
            try {
                const totalProducts = appState.inventory.length;
                const totalValue = appState.inventory.reduce((sum, product) => sum + product.totalValue, 0);
                const totalVNR = appState.inventory.reduce((sum, product) => sum + product.vnr, 0);

                const totalProductsEl = document.getElementById('totalProducts');
                const totalValueEl = document.getElementById('totalValue');
                const totalVNREl = document.getElementById('totalVNR');

                if (totalProductsEl) totalProductsEl.textContent = totalProducts;
                if (totalValueEl) totalValueEl.textContent = `Q. ${totalValue.toFixed(2)}`;
                if (totalVNREl) totalVNREl.textContent = `Q. ${totalVNR.toFixed(2)}`;
            } catch (error) {
                console.error('Error actualizando resumen:', error);
            }
        }

        function editProduct(id) {
            try {
                const product = appState.inventory.find(p => p.id === id);
                if (product) {
                    document.getElementById('productCode').value = product.code;
                    document.getElementById('productName').value = product.name;
                    document.getElementById('productQuantity').value = product.quantity;
                    document.getElementById('unitCost').value = product.unitCost;
                    document.getElementById('salePrice').value = product.salePrice;
                    document.getElementById('marketValue').value = product.marketValue;
                    
                    deleteProduct(id);
                    showAlert('info', 'Producto cargado para edici√≥n');
                }
            } catch (error) {
                console.error('Error editando producto:', error);
            }
        }

        function deleteProduct(id) {
            try {
                appState.inventory = appState.inventory.filter(p => p.id !== id);
                updateInventoryDisplay();
                showAlert('success', 'Producto eliminado del inventario');
            } catch (error) {
                console.error('Error eliminando producto:', error);
            }
        }

        // GESTI√ìN DE USUARIOS
        function handleUserSubmit(e) {
            e.preventDefault();
            try {
                const user = {
                    id: Date.now(),
                    name: document.getElementById('userName').value,
                    email: document.getElementById('userEmail').value,
                    phone: document.getElementById('userPhone').value,
                    company: document.getElementById('userCompany').value,
                    position: document.getElementById('userPosition').value,
                    role: document.getElementById('userRole').value,
                    createdDate: new Date().toLocaleDateString()
                };

                appState.users.push(user);
                updateUsersDisplay();
                document.getElementById('userForm').reset();
                showAlert('success', 'Usuario creado exitosamente');
            } catch (error) {
                console.error('Error creando usuario:', error);
                showAlert('error', 'Error al crear usuario');
            }
        }

        function updateUsersDisplay() {
            try {
                const usersList = document.getElementById('usersList');
                if (!usersList) return;

                let html = '';

                appState.users.forEach(user => {
                    html += `
                        <div class="user-item">
                            <div class="user-info">
                                <h4>${user.name}</h4>
                                <p><strong>Email:</strong> ${user.email}</p>
                                <p><strong>Empresa:</strong> ${user.company}</p>
                                <p><strong>Puesto:</strong> ${user.position}</p>
                                <p><strong>Rol:</strong> ${getRoleDisplayName(user.role)}</p>
                                <p><strong>Fecha de creaci√≥n:</strong> ${user.createdDate}</p>
                            </div>
                            <div class="user-actions">
                                <button class="btn btn-warning" onclick="editUser(${user.id})">Editar</button>
                                <button class="btn btn-danger" onclick="deleteUser(${user.id})">Eliminar</button>
                            </div>
                        </div>
                    `;
                });

                usersList.innerHTML = html || '<p>No hay usuarios registrados</p>';
            } catch (error) {
                console.error('Error actualizando usuarios:', error);
            }
        }

        function getRoleDisplayName(role) {
            const roleNames = {
                'admin': 'Administrador',
                'auditor': 'Auditor',
                'client': 'Cliente'
            };
            return roleNames[role] || role;
        }

        function editUser(id) {
            try {
                const user = appState.users.find(u => u.id === id);
                if (user) {
                    document.getElementById('userName').value = user.name;
                    document.getElementById('userEmail').value = user.email;
                    document.getElementById('userPhone').value = user.phone;
                    document.getElementById('userCompany').value = user.company;
                    document.getElementById('userPosition').value = user.position;
                    document.getElementById('userRole').value = user.role;
                    
                    deleteUser(id);
                    showAlert('info', 'Usuario cargado para edici√≥n');
                }
            } catch (error) {
                console.error('Error editando usuario:', error);
            }
        }

        function deleteUser(id) {
            try {
                appState.users = appState.users.filter(u => u.id !== id);
                updateUsersDisplay();
                showAlert('success', 'Usuario eliminado');
            } catch (error) {
                console.error('Error eliminando usuario:', error);
            }
        }

        // GESTI√ìN DE ARCHIVOS
        function setupFileUpload() {
            try {
                const fileUploadZone = document.getElementById('fileUploadZone');
                const fileInput = document.getElementById('fileInput');

                if (fileUploadZone && fileInput) {
                    fileUploadZone.addEventListener('click', () => fileInput.click());
                    fileUploadZone.addEventListener('dragover', handleDragOver);
                    fileUploadZone.addEventListener('dragleave', handleDragLeave);
                    fileUploadZone.addEventListener('drop', handleFileDrop);
                    fileInput.addEventListener('change', handleFileSelect);
                }
            } catch (error) {
                console.error('Error configurando subida de archivos:', error);
            }
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.currentTarget.classList.add('dragover');
        }

        function handleDragLeave(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('dragover');
        }

        function handleFileDrop(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('dragover');
            const files = Array.from(e.dataTransfer.files);
            processFiles(files);
        }

        function handleFileSelect(e) {
            const files = Array.from(e.target.files);
            processFiles(files);
        }

        function processFiles(files) {
            try {
                const validExtensions = ['.xlsx', '.pdf', '.png', '.docx'];
                const maxSize = 200 * 1024 * 1024; // 200MB

                files.forEach(file => {
                    const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
                    
                    if (!validExtensions.includes(fileExtension)) {
                        showAlert('error', `Formato no soportado: ${file.name}`);
                        return;
                    }

                    if (file.size > maxSize) {
                        showAlert('error', `Archivo muy grande: ${file.name} (m√°x. 200MB)`);
                        return;
                    }

                    uploadFile(file);
                });
            } catch (error) {
                console.error('Error procesando archivos:', error);
            }
        }

        function uploadFile(file) {
            try {
                const uploadProgress = document.getElementById('uploadProgress');
                const progressFill = document.getElementById('progressFill');
                const uploadStatus = document.getElementById('uploadStatus');

                if (uploadProgress) uploadProgress.classList.remove('hidden');
                if (uploadStatus) uploadStatus.textContent = `Subiendo: ${file.name}`;

                // Simulaci√≥n de carga de archivo
                let progress = 0;
                const interval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress >= 100) {
                        progress = 100;
                        clearInterval(interval);
                        
                        // Guardar archivo en el estado
                        const fileObj = {
                            id: Date.now(),
                            name: file.name,
                            size: file.size,
                            type: file.type,
                            uploadDate: new Date().toLocaleDateString(),
                            uploader: appState.currentUser ? appState.currentUser.name : 'Usuario'
                        };
                        
                        appState.files.push(fileObj);
                        updateFilesDisplay();
                        
                        setTimeout(() => {
                            if (uploadProgress) uploadProgress.classList.add('hidden');
                            showAlert('success', `Archivo subido exitosamente: ${file.name}`);
                        }, 500);
                    }
                    
                    if (progressFill) progressFill.style.width = `${progress}%`;
                    if (uploadStatus) uploadStatus.textContent = `Subiendo: ${file.name} (${Math.round(progress)}%)`;
                }, 200);
            } catch (error) {
                console.error('Error subiendo archivo:', error);
            }
        }

        function updateFilesDisplay() {
            try {
                const filesList = document.getElementById('filesList');
                if (!filesList) return;

                let html = '';

                appState.files.forEach(file => {
                    const fileSizeKB = (file.size / 1024).toFixed(2);
                    html += `
                        <div class="user-item">
                            <div class="user-info">
                                <h4>üìÑ ${file.name}</h4>
                                <p><strong>Tama√±o:</strong> ${fileSizeKB} KB</p>
                                <p><strong>Subido por:</strong> ${file.uploader}</p>
                                <p><strong>Fecha:</strong> ${file.uploadDate}</p>
                            </div>
                            <div class="user-actions">
                                <button class="btn btn-success" onclick="downloadFile(${file.id})">Descargar</button>
                                <button class="btn btn-danger" onclick="deleteFile(${file.id})">Eliminar</button>
                            </div>
                        </div>
                    `;
                });

                filesList.innerHTML = html || '<p>No hay archivos subidos</p>';
            } catch (error) {
                console.error('Error actualizando archivos:', error);
            }
        }

        function downloadFile(id) {
            try {
                const file = appState.files.find(f => f.id === id);
                if (file) {
                    showAlert('info', `Descargando: ${file.name}`);
                }
            } catch (error) {
                console.error('Error descargando archivo:', error);
            }
        }

        function deleteFile(id) {
            try {
                appState.files = appState.files.filter(f => f.id !== id);
                updateFilesDisplay();
                showAlert('success', 'Archivo eliminado');
            } catch (error) {
                console.error('Error eliminando archivo:', error);
            }
        }

        // GESTI√ìN DE CORREOS
        function handleEmailSubmit(e) {
            e.preventDefault();
            try {
                const emailData = {
                    id: Date.now(),
                    to: document.getElementById('emailTo').value,
                    subject: document.getElementById('emailSubject').value,
                    message: document.getElementById('emailMessage').value,
                    from: appState.currentUser ? appState.currentUser.email : 'usuario@sistema.gt',
                    sentDate: new Date().toLocaleDateString(),
                    sentTime: new Date().toLocaleTimeString()
                };

                showAlert('info', 'Enviando correo...');

                // Intentar env√≠o real por diferentes m√©todos
                sendRealEmail(emailData);
                
            } catch (error) {
                console.error('Error enviando correo:', error);
                showAlert('error', 'Error al enviar correo');
            }
        }

        async function sendRealEmail(emailData) {
            try {
                const service = appState.emailConfig.service;
                
                switch (service) {
                    case 'emailjs':
                        // Solo intentar EmailJS si est√° disponible y configurado
                        if (emailjsLoaded && appState.emailConfig.emailjsServiceId !== 'YOUR_SERVICE_ID') {
                            await sendWithEmailJS(emailData);
                        } else {
                            showAlert('info', 'EmailJS no configurado, usando cliente local...');
                            await sendWithMailto(emailData);
                        }
                        break;
                        
                    case 'mailto':
                        await sendWithMailto(emailData);
                        break;
                        
                    case 'backend':
                        try {
                            await sendWithBackendAPI(emailData);
                        } catch (error) {
                            showAlert('info', 'API no disponible, usando cliente local...');
                            await sendWithMailto(emailData);
                        }
                        break;
                        
                    default:
                        await sendWithMailto(emailData);
                }

            } catch (error) {
                console.error('Error en env√≠o real:', error);
                
                // Siempre tener un fallback que funcione
                try {
                    await sendWithMailto(emailData);
                } catch (fallbackError) {
                    await fallbackEmailMethod(emailData);
                }
            }
        }

        // M√âTODO 1: EmailJS - Servicio recomendado para env√≠o real
        async function sendWithEmailJS(emailData) {
            try {
                // Verificar si EmailJS est√° disponible
                if (!emailjsLoaded || typeof emailjs === 'undefined') {
                    throw new Error('EmailJS no est√° disponible');
                }

                // Verificar configuraci√≥n
                const { emailjsServiceId, emailjsTemplateId, emailjsPublicKey } = appState.emailConfig;
                
                if (emailjsPublicKey === 'SU_CLAVE_PUBLICA') {
                    throw new Error('EmailJS no est√° configurado. Configure las credenciales primero.');
                }

                // Verificar l√≠mite diario
                if (appState.emailConfig.emailsSentToday >= appState.emailConfig.maxEmailsPerDay) {
                    throw new Error('L√≠mite diario de correos alcanzado (200 en plan gratuito)');
                }

                showAlert('info', 'üì§ Enviando correo via EmailJS...');

                const templateParams = {
                    from_name: appState.currentUser ? appState.currentUser.name : 'Sistema Auditor√≠a GT',
                    from_email: emailData.from,
                    to_email: emailData.to,
                    cc_email: emailData.cc || '',
                    subject: emailData.subject,
                    message: emailData.message,
                    priority: emailData.priority || 'normal',
                    reply_to: emailData.from,
                    html_content: emailData.htmlFormat ? 
                        emailData.message.replace(/\n/g, '<br>').replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') : 
                        emailData.message
                };

                // Enviar con EmailJS
                const response = await emailjs.send(
                    emailjsServiceId,
                    emailjsTemplateId,
                    templateParams,
                    emailjsPublicKey
                );
                
                if (response.status === 200) {
                    // √âxito
                    emailData.status = 'sent';
                    emailData.method = 'emailjs';
                    emailData.messageId = response.text;
                    appState.emails.push(emailData);
                    appState.emailConfig.emailsSentToday++;
                    
                    updateEmailHistoryDisplay();
                    updateEmailJSStatus();
                    showAlert('success', `‚úÖ Correo enviado exitosamente a ${emailData.to} via EmailJS`);
                    document.getElementById('emailForm').reset();
                } else {
                    throw new Error(`HTTP ${response.status}: ${response.text}`);
                }
                
            } catch (error) {
                console.error('Error con EmailJS:', error);
                
                // Mostrar error espec√≠fico
                let errorMsg = 'Error con EmailJS: ';
                if (error.message.includes('402')) {
                    errorMsg += 'L√≠mite de correos excedido';
                } else if (error.message.includes('400')) {
                    errorMsg += 'Error de configuraci√≥n';
                } else if (error.message.includes('401')) {
                    errorMsg += 'Credenciales inv√°lidas';
                } else {
                    errorMsg += error.message;
                }
                
                showAlert('error', errorMsg);
                throw error;
            }
        }

        // M√âTODO 2: Cliente de correo del sistema (Gmail, Outlook, etc.)
        async function sendWithMailto(emailData) {
            try {
                const subject = encodeURIComponent(emailData.subject);
                const body = encodeURIComponent(emailData.message);
                const cc = emailData.cc ? `&cc=${encodeURIComponent(emailData.cc)}` : '';
                
                const mailtoLink = `mailto:${emailData.to}?subject=${subject}&body=${body}${cc}`;

                // Abrir cliente de correo
                const mailtoWindow = window.open(mailtoLink, '_blank');
                
                // Verificar si se pudo abrir
                if (!mailtoWindow || mailtoWindow.closed) {
                    // Si no se puede abrir ventana, usar location.href
                    window.location.href = mailtoLink;
                }

                // Guardar en historial despu√©s de un delay
                setTimeout(() => {
                    emailData.status = 'sent';
                    emailData.method = 'mailto';
                    appState.emails.push(emailData);
                    updateEmailHistoryDisplay();
                    showAlert('success', `üìß Cliente de correo abierto para ${emailData.to}`);
                    document.getElementById('emailForm').reset();
                }, 1500);

            } catch (error) {
                console.error('Error con mailto:', error);
                throw error;
            }
        }

        // M√âTODO 3: Fallback - Web Share API o copiar
        async function fallbackEmailMethod(emailData) {
            try {
                const emailContent = `Para: ${emailData.to}
Asunto: ${emailData.subject}
De: ${emailData.from}

${emailData.message}

---
Enviado desde Sistema de Auditor√≠a - Guatemala`;

                // Intentar Web Share API
                if (navigator.share) {
                    await navigator.share({
                        title: emailData.subject,
                        text: emailContent
                    });
                    showAlert('success', 'Contenido compartido exitosamente');
                } else {
                    // Copiar al portapapeles
                    await copyToClipboard(emailContent);
                    showAlert('info', 'üìã Contenido del correo copiado al portapapeles. P√©galo en tu cliente de correo.');
                }

                appState.emails.push(emailData);
                document.getElementById('emailForm').reset();

            } catch (error) {
                console.error('Error en m√©todo fallback:', error);
                showAlert('error', 'No se pudo enviar el correo. Por favor, copia manualmente el contenido.');
            }
        }

        // Funci√≥n para copiar al portapapeles
        async function copyToClipboard(text) {
            try {
                if (navigator.clipboard && navigator.clipboard.writeText) {
                    await navigator.clipboard.writeText(text);
                } else {
                    // Fallback para navegadores antiguos
                    const textArea = document.createElement('textarea');
                    textArea.value = text;
                    textArea.style.position = 'fixed';
                    textArea.style.opacity = '0';
                    document.body.appendChild(textArea);
                    textArea.focus();
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                }
            } catch (error) {
                console.error('Error copiando al portapapeles:', error);
                throw error;
            }
        }

        // M√âTODO AVANZADO: Integraci√≥n con API Backend
        async function sendWithBackendAPI(emailData) {
            try {
                const response = await fetch('/api/send-email', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${getAuthToken()}`
                    },
                    body: JSON.stringify({
                        to: emailData.to,
                        subject: emailData.subject,
                        html: formatEmailHTML(emailData.message),
                        from: emailData.from,
                        attachments: getEmailAttachments()
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                
                if (result.success) {
                    appState.emails.push({...emailData, messageId: result.messageId});
                    showAlert('success', `‚úÖ Correo enviado exitosamente a ${emailData.to}`);
                    document.getElementById('emailForm').reset();
                } else {
                    throw new Error(result.error || 'Error desconocido');
                }

            } catch (error) {
                console.error('Error con API backend:', error);
                throw error;
            }
        }

        function formatEmailHTML(message) {
            // Convertir texto plano a HTML con formato
            const htmlMessage = message
                .replace(/\n/g, '<br>')
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>');
            
            return `
                <div style="font-family: 'Segoe UI', sans-serif; max-width: 600px; margin: 0 auto;">
                    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center;">
                        <h2>üá¨üáπ Sistema de Auditor√≠a Guatemala</h2>
                    </div>
                    <div style="padding: 30px; background: white; border: 1px solid #e9ecef;">
                        ${htmlMessage}
                    </div>
                    <div style="background: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #6c757d;">
                        <p>Este correo fue enviado desde el Sistema de Auditor√≠a - Guatemala</p>
                        <p>Fecha: ${new Date().toLocaleString('es-GT')}</p>
                    </div>
                </div>
            `;
        }

        function getAuthToken() {
            // Retornar token de autenticaci√≥n si existe
            return localStorage.getItem('authToken') || 'demo-token';
        }

        function getEmailAttachments() {
            // Retornar archivos adjuntos si existen
            return [];
        }

        function loadEmailTemplate(type) {
            try {
                const currentUserName = appState.currentUser ? appState.currentUser.name : 'Usuario del Sistema';
                const inventoryCount = appState.inventory.length;
                const inventoryValue = appState.inventory.reduce((sum, p) => sum + p.totalValue, 0);

                const templates = {
                    audit: {
                        subject: 'Solicitud de Auditor√≠a - ' + new Date().getFullYear(),
                        message: `Estimado/a,

Espero que este mensaje le encuentre bien. Me dirijo a usted para solicitar una auditor√≠a de inventarios para nuestra empresa.

Detalles de la solicitud:
- Empresa: [Nombre de la empresa]
- Per√≠odo a auditar: [Per√≠odo]
- Fecha propuesta: [Fecha]

Agradecemos su pronta respuesta.

Saludos cordiales,
${currentUserName}
Sistema de Auditor√≠a - Guatemala`
                    },
                    report: {
                        subject: 'Reporte de Inventario - ' + new Date().toLocaleDateString(),
                        message: `Adjunto encontrar√° el reporte de inventario actualizado.

Resumen:
- Total de productos: ${inventoryCount}
- Valor total del inventario: Q. ${inventoryValue.toFixed(2)}

Por favor, revise la informaci√≥n y no dude en contactarnos para cualquier aclaraci√≥n.

Atentamente,
${currentUserName}`
                    },
                    reminder: {
                        subject: 'Recordatorio - Auditor√≠a Pendiente',
                        message: `Estimado/a,

Este es un recordatorio amigable sobre la auditor√≠a programada.

Detalles:
- Fecha: [Fecha]
- Hora: [Hora]
- Ubicaci√≥n: [Direcci√≥n]

Por favor, confirme su asistencia.

Saludos,
${currentUserName}`
                    }
                };

                const template = templates[type];
                if (template) {
                    document.getElementById('emailSubject').value = template.subject;
                    document.getElementById('emailMessage').value = template.message;
                    showAlert('info', 'Plantilla de correo cargada');
                }
            } catch (error) {
                console.error('Error cargando plantilla:', error);
            }
        }

        // REPORTES Y ESTAD√çSTICAS
        function generateReport(type) {
            try {
                const reports = {
                    inventory: () => generateInventoryReport(),
                    vnr: () => generateVNRReport(),
                    valuation: () => generateValuationReport(),
                    users: () => generateUsersReport()
                };

                if (reports[type]) {
                    reports[type]();
                }
            } catch (error) {
                console.error('Error generando reporte:', error);
                showAlert('error', 'Error al generar el reporte');
            }
        }

        function generateInventoryReport() {
            try {
                if (appState.inventory.length === 0) {
                    showAlert('error', 'No hay productos en el inventario para generar el reporte');
                    return;
                }

                const currentUserName = appState.currentUser ? appState.currentUser.name : 'Usuario del Sistema';
                const totalValue = appState.inventory.reduce((sum, p) => sum + p.totalValue, 0);
                const totalVNR = appState.inventory.reduce((sum, p) => sum + p.vnr, 0);

                let report = `=== REPORTE DE INVENTARIO ===
Fecha: ${new Date().toLocaleDateString()}
Generado por: ${currentUserName}

RESUMEN:
- Total de productos: ${appState.inventory.length}
- Valor total del inventario: Q. ${totalValue.toFixed(2)}
- VNR total: Q. ${totalVNR.toFixed(2)}

DETALLE DE PRODUCTOS:
`;

                appState.inventory.forEach((product, index) => {
                    report += `
${index + 1}. ${product.name} (${product.code})
   - Cantidad: ${product.quantity}
   - Costo unitario: Q. ${product.unitCost.toFixed(2)}
   - Precio de venta: Q. ${product.salePrice.toFixed(2)}
   - Valor total: Q. ${product.totalValue.toFixed(2)}
   - VNR: Q. ${product.vnr.toFixed(2)}
`;
                });

                downloadReport(report, 'reporte_inventario.txt');
            } catch (error) {
                console.error('Error generando reporte de inventario:', error);
            }
        }

        function generateVNRReport() {
            try {
                const currentUserName = appState.currentUser ? appState.currentUser.name : 'Usuario del Sistema';
                
                let report = `=== AN√ÅLISIS DE VALOR NETO DE REALIZACI√ìN (VNR) ===
Fecha: ${new Date().toLocaleDateString()}
Generado por: ${currentUserName}

El VNR representa el valor estimado de venta menos los costos estimados de finalizaci√≥n y venta.

AN√ÅLISIS POR PRODUCTO:
`;

                appState.inventory.forEach((product, index) => {
                    const vnrPerUnit = product.vnr / product.quantity;
                    const margin = ((vnrPerUnit - product.unitCost) / product.unitCost * 100).toFixed(2);
                    
                    report += `
${index + 1}. ${product.name}
   - VNR unitario: Q. ${vnrPerUnit.toFixed(2)}
   - Costo unitario: Q. ${product.unitCost.toFixed(2)}
   - Margen: ${margin}%
   - VNR total: Q. ${product.vnr.toFixed(2)}
`;
                });

                downloadReport(report, 'analisis_vnr.txt');
            } catch (error) {
                console.error('Error generando reporte VNR:', error);
            }
        }

        function generateValuationReport() {
            try {
                const currentUserName = appState.currentUser ? appState.currentUser.name : 'Usuario del Sistema';
                
                let report = `=== REPORTE DE VALUACI√ìN DE INVENTARIOS ===
Fecha: ${new Date().toLocaleDateString()}
Generado por: ${currentUserName}
M√©todo: Costo vs VNR (el menor)

CRITERIOS DE VALUACI√ìN:
- Se utiliza el menor valor entre costo y VNR
- Cumple con principios contables guatemaltecos

VALUACI√ìN POR PRODUCTO:
`;

                let totalValuation = 0;
                appState.inventory.forEach((product, index) => {
                    const costTotal = product.unitCost * product.quantity;
                    const valuation = Math.min(costTotal, product.vnr);
                    totalValuation += valuation;
                    
                    report += `
${index + 1}. ${product.name}
   - Costo total: Q. ${costTotal.toFixed(2)}
   - VNR: Q. ${product.vnr.toFixed(2)}
   - Valuaci√≥n (menor): Q. ${valuation.toFixed(2)}
`;
                });

                const totalCost = appState.inventory.reduce((sum, p) => sum + p.totalCost, 0);
                report += `

RESUMEN DE VALUACI√ìN:
- Valuaci√≥n total del inventario: Q. ${totalValuation.toFixed(2)}
- Diferencia con costo hist√≥rico: Q. ${(totalCost - totalValuation).toFixed(2)}
`;

                downloadReport(report, 'valuacion_inventarios.txt');
            } catch (error) {
                console.error('Error generando reporte de valuaci√≥n:', error);
            }
        }

        function generateUsersReport() {
            try {
                const currentUserName = appState.currentUser ? appState.currentUser.name : 'Usuario del Sistema';
                
                let report = `=== REPORTE DE USUARIOS ===
Fecha: ${new Date().toLocaleDateString()}
Generado por: ${currentUserName}

RESUMEN:
- Total de usuarios: ${appState.users.length}

DETALLE DE USUARIOS:
`;

                const roleGroups = {};
                appState.users.forEach(user => {
                    if (!roleGroups[user.role]) {
                        roleGroups[user.role] = [];
                    }
                    roleGroups[user.role].push(user);
                });

                Object.keys(roleGroups).forEach(role => {
                    report += `

${getRoleDisplayName(role).toUpperCase()}S (${roleGroups[role].length}):
`;
                    roleGroups[role].forEach((user, index) => {
                        report += `${index + 1}. ${user.name} - ${user.company} (${user.email})
`;
                    });
                });

                downloadReport(report, 'reporte_usuarios.txt');
            } catch (error) {
                console.error('Error generando reporte de usuarios:', error);
            }
        }

        function downloadReport(content, filename) {
            try {
                const blob = new Blob([content], { type: 'text/plain' });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
                
                showAlert('success', `Reporte generado y descargado: ${filename}`);
            } catch (error) {
                console.error('Error descargando reporte:', error);
                showAlert('error', 'Error al descargar el reporte');
            }
        }

        function updateStatistics() {
            try {
                const stats = {
                    products: appState.inventory.length,
                    users: appState.users.length,
                    files: appState.files.length,
                    emails: appState.emails.length
                };

                const statsProductsEl = document.getElementById('statsProducts');
                const statsUsersEl = document.getElementById('statsUsers');
                const statsFilesEl = document.getElementById('statsFiles');
                const statsEmailsEl = document.getElementById('statsEmails');

                if (statsProductsEl) statsProductsEl.textContent = stats.products;
                if (statsUsersEl) statsUsersEl.textContent = stats.users;
                if (statsFilesEl) statsFilesEl.textContent = stats.files;
                if (statsEmailsEl) statsEmailsEl.textContent = stats.emails;
            } catch (error) {
                console.error('Error actualizando estad√≠sticas:', error);
            }
        }

        // GESTI√ìN DE PERFIL
        function handleProfileSubmit(e) {
            e.preventDefault();
            try {
                if (!appState.currentUser) return;

                // Actualizar informaci√≥n del usuario actual
                const updatedProfile = {
                    name: document.getElementById('profileName').value,
                    email: document.getElementById('profileEmail').value,
                    phone: document.getElementById('profilePhone').value,
                    company: document.getElementById('profileCompany').value,
                    position: document.getElementById('profilePosition').value
                };

                // En una aplicaci√≥n real, esto se enviar√≠a al servidor
                Object.assign(appState.currentUser, updatedProfile);
                
                showAlert('success', 'Perfil actualizado exitosamente');
            } catch (error) {
                console.error('Error actualizando perfil:', error);
                showAlert('error', 'Error al actualizar el perfil');
            }
        }

        // UTILIDADES
        function showAlert(type, message) {
            try {
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert alert-${type}`;
                alertDiv.textContent = message;
                
                // Insertar al inicio del contenido activo
                const activeTab = document.querySelector('.tab-content.active');
                if (activeTab) {
                    activeTab.insertBefore(alertDiv, activeTab.firstChild);
                    
                    // Remover despu√©s de 5 segundos
                    setTimeout(() => {
                        if (alertDiv.parentNode) {
                            alertDiv.parentNode.removeChild(alertDiv);
                        }
                    }, 5000);
                }
            } catch (error) {
                console.error('Error mostrando alerta:', error);
            }
        }

        function loadSampleData() {
            try {
                // Datos de ejemplo para demostraci√≥n
                appState.users = [
                    {
                        id: 1,
                        name: 'Mar√≠a Gonz√°lez',
                        email: 'maria.gonzalez@empresa.gt',
                        phone: '+502 2234-5678',
                        company: 'Corporaci√≥n Guatemala S.A.',
                        position: 'Gerente de Finanzas',
                        role: 'admin',
                        createdDate: '15/08/2025'
                    },
                    {
                        id: 2,
                        name: 'Carlos L√≥pez',
                        email: 'carlos.lopez@auditores.gt',
                        phone: '+502 5678-9012',
                        company: 'L√≥pez & Asociados',
                        position: 'Auditor Senior',
                        role: 'auditor',
                        createdDate: '20/08/2025'
                    }
                ];

                appState.inventory = [
                    {
                        id: 1,
                        code: 'PROD001',
                        name: 'Caf√© Premium Guatemala',
                        quantity: 500,
                        unitCost: 25.00,
                        salePrice: 35.00,
                        marketValue: 32.00,
                        vnr: 16000.00,
                        totalCost: 12500.00,
                        totalValue: 17500.00,
                        date: '25/08/2025'
                    },
                    {
                        id: 2,
                        code: 'PROD002',
                        name: 'Textiles Tradicionales',
                        quantity: 200,
                        unitCost: 45.00,
                        salePrice: 75.00,
                        marketValue: 70.00,
                        vnr: 14000.00,
                        totalCost: 9000.00,
                        totalValue: 15000.00,
                        date: '26/08/2025'
                    }
                ];

                // Actualizar displays iniciales
                updateUsersDisplay();
                updateInventoryDisplay();
                
                console.log('Datos de ejemplo cargados correctamente');
            } catch (error) {
                console.error('Error cargando datos de ejemplo:', error);
            }
        }
    </script>
</body>
</html>
